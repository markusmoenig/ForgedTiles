use forgedtiles::prelude::*;
use std::fs::File;
use std::io::BufWriter;
use std::path::PathBuf;

fn main() {
    let ft = ForgedTiles::new();

    let file_name = "main.ft";
    let width = 600_usize;
    let height = 600_usize;

    let rc = ft.compile(PathBuf::new(), file_name.into());

    let samples = 2;

    match rc {
        Ok(ctx) => {
            let mut buffer = vec![0; width * height * 4];
            let start = get_time();
            // ctx.render(width, height, &mut buffer);
            for i in 0..samples {
                ctx.render_bsdf_sample(width, height, &mut buffer, i);
            }
            println!("Image rendered in {} ms", get_time() - start);

            let path = "image.png";
            let file = File::create(path).unwrap();
            let w = BufWriter::new(file);

            let mut encoder = png::Encoder::new(w, width as u32, height as u32);
            encoder.set_color(png::ColorType::Rgba);
            encoder.set_depth(png::BitDepth::Eight);
            encoder
                .add_text_chunk(
                    "ForgedTiles".to_string(),
                    "This image was procedurally generated by ForgedTiles.".to_string(),
                )
                .unwrap();

            let mut writer = encoder.write_header().unwrap();

            // let start = get_time();
            // rpu.render(&mut buffer, (0, 0, width, height), width);
            //println!("Image rendered in {} ms", get_time() - start);
            writer.write_image_data(&buffer).unwrap(); // Save
        }
        Err(err) => {
            println!("{:?}", err);
        }
    }
}

/// Gets the current time in milliseconds
pub fn get_time() -> u128 {
    #[cfg(target_arch = "wasm32")]
    {
        web_sys::window().unwrap().performance().unwrap().now() as u128
    }
    #[cfg(not(target_arch = "wasm32"))]
    {
        let stop = std::time::SystemTime::now()
            .duration_since(std::time::UNIX_EPOCH)
            .expect("Time went backwards");
        stop.as_millis()
    }
}
